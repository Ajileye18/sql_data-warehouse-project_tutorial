-- Data Analytics
-- database exploration
 -- explore all objects in the database
 SELECT * FROM INFORMATION_SCHEMA.TABLES;
 
 -- explore all columns in the database
 SELECT * FROM INFORMATION_SCHEMA.COLUMNS;

-- Dimension Exploration
SELECT DISTINCT country FROM gold.dim_customers;

-- Explore all categories "The major division"
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1,2,3;

-- date exploration
/* identify the boundary */
-- find the date of the first and last order
SELECT MIN(order_date) first_order,
		Max(order_date) last_order,
        YEAR(MAX(order_date)) - YEAR(MIN(order_date))
       -- timestampdiff(YEAR, MIN(order_date), MAX(order_date) )
FROM sales_fact;
SELECT MAX(order_date) FROM sales_fact;
-- FIND THE OLDEST AND YOUNGEST CUSSTOMER
SELECT MIN(birthdate) oldest_birthdate,
		MAX(birthdate) youngest_birthdate,
        -- datediff(MAX(birthdate),MIN(birthdate)),
        YEAR(now()) - YEAR(MIN(birthdate))  oldest_customer,
        YEAR(now()) - YEAR(MAX(birthdate))  youngest_customer
FROM customers_dim;

-- Measures exploration
-- Find the total sale
SELECT sum(sales_amount) AS total_sales FROM sales_fact;
-- Find how many items are sold
SELECT SUM(quantity) AS total_quantity FROM sales_fact;
-- Find the average selling price
SELECT AVG(price) AS Avg_price FROM sales_fact;
-- Find the total number of orders
SELECT COUNT(order_number) AS total_orders FROM sales_fact;
 SELECT COUNT(DISTINCT order_number) AS total_orders FROM sales_fact;
-- Find the total number of products
SELECT COUNT(product_id) AS total_product FROM product_dim;
SELECT COUNT(DISTINCT product_id) AS total_product FROM product_dim;
-- Find the total number of customers
SELECT COUNT(customer_id) AS total_customer FROM customers_dim;
SELECT COUNT(DISTINCT customer_id) AS total_customer FROM customers_dim;
-- Find the total number of customers that has placed an order
SELECT COUNT(customer_key) AS customer_with_order FROM sales_fact;
SELECT COUNT(DISTINCT customer_key) AS customer_with_order FROM sales_fact;

-- Generate a report that shows all key metrics of the business
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM sales_fact
UNION ALL
SELECT 'total_quantity', SUM(quantity) FROM sales_fact
UNION ALL
SELECT 'avg_Price', AVG(price) FROM sales_fact
UNION ALL
SELECT 'total_orders', COUNT(DISTINCT order_number) FROM sales_fact;

/* Magnitude Analysis */
-- Find the total customers by countries
SELECT country,
		COUNT(customer_key) AS total_customers
FROM customers_dim
GROUP BY country
ORDER BY total_customers DESC;
-- Find total customers by gender
SELECT gender,
		COUNT(customer_key) AS total_customers
FROM customers_dim
GROUP BY gender
ORDER BY total_customers DESC;
-- Find total products by category
SELECT category, count(product_key) total_products
FROM product_dim
GROUP BY category
ORDER BY count(product_key) desc;
-- What is the average costs in each category
SELECT category, AVG(cost) avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost desc;
-- What is the total revenue generated for each category
SELECT p.category,
SUM(s.sales_amount) REVENUE 
FROM gold.dim_products p
LEFT JOIN gold.fact_sales s ON p.product_key = s.product_key
GROUP BY p.category
ORDER BY revenue desc;
-- Find the total revenue generated by each customer
SELECT customer_id, SUM(f.sales_amount)
FROM customers_dim c
LEFT JOIN sales_fact f ON c.customer_key = f.customer_key
GROUP BY customer_id
ORDER BY SUM(f.sales_amount) DESC;
-- What is the distribution of sold items across countries
SELECT c.country,
		SUM(f.quantity) total_sold_items
FROM customers_dim c
LEFT JOIN  sales_fact f ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC
LIMIT 5;

-- Ranking Analysis
-- Which 5 products generate the highest revenue
SELECT p.product_name, SUM(f.sales_amount) total_revenue
FROM product_dim p
LEFT JOIN sales_fact f ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC;
-- What are the 5 worst performing products in terms of sales
SELECT * FROM (
SELECT p.product_name, SUM(f.sales_amount) total_revenue
FROM product_dim p
LEFT JOIN sales_fact f ON p.product_key = f.product_key
GROUP BY p.product_name
HAVING SUM(f.sales_amount) IS NOT NULL
ORDER BY total_revenue ASC)T
LIMIT 5;

-- ADVNACED DATA ANALYTICS 
-- 1. CHANGE-OVER-TIME
/* ANALYZE HOW A MEASURE EVOLVES OVER TIME */
-- Year-over-Year change
SELECT YEAR(order_date) AS order_year, 
		SUM(sales_amount) AS total_sales,
        COUNT(DISTINCT customer_key) AS total_customers,
        SUM(quantity) AS total_quantity
from sales_fact
WHERE order_date != ''
GROUP BY YEAR(order_date)
ORDER BY YEAR(order_date);

-- month-over-month chnages
SELECT YEAR(order_date) AS order_year, 
		SUM(sales_amount) AS total_sales,
        COUNT(DISTINCT customer_key) AS total_customers,
        SUM(quantity) AS total_quantity
from sales_fact
WHERE order_date != ''
GROUP BY MONTH(order_date)
ORDER BY MONTH(order_date);

-- cumulative analysis
-- calculate the total sales per month
-- and the running total of sales over time
SELECT order_date, total_sales,
SUM(total_sales) OVER(ORDER BY order_date) AS running_total_sales, -- RUNNING TOTAL
ROUND(AVG(avg_price) OVER(ORDER BY order_date), 0) moving_average -- MOVING AVERAGE
FROM (
SELECT date_format(order_date, '%Y-%m') order_date, AVG(price) avg_price, SUM(sales_amount) total_sales
FROM sales_fact
WHERE order_date != ''
GROUP BY date_format(order_date, '%Y-%m')
ORDER BY date_format(order_date, '%Y-%m'))T ;

-- PERFORMANCE ANALYSIS
/* Analyse the yearly performance of products by comparing each producr's 
sales to both its average sales performance and the previous year sales*/
  WITH yearly_product_sales AS (
  SELECT YEAR(s.order_date) order_year,
			p.product_name,
		SUM(s.sales_amount) current_sales
  FROM sales_fact s
  LEFT JOIN product_dim p
  ON s.product_key = p.product_key
  WHERE YEAR(order_date) != ''
  GROUP BY YEAR(s.order_date), p.product_name)
  
  SELECT order_year,
		product_name,
        current_sales,
        AVG(current_sales) OVER(PARTITION BY product_name) avg_sales,
         current_sales - AVG(current_sales) OVER(PARTITION BY product_name) diff_avg,
         CASE WHEN current_sales - AVG(current_sales) OVER(PARTITION BY product_name) > 0 THEN 'Above avg'
			  WHEN current_sales - AVG(current_sales) OVER(PARTITION BY product_name) < 0 THEN 'Below avg'
              ELSE 'AVG'
		END Avg_change,
        -- year over year analysis
        LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) py_sales,
        current_sales -  LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) diff_py,
         CASE WHEN current_sales - LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) > 0 THEN 'Increase'
			  WHEN current_sales - LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) < 0 THEN 'Decrease'
              ELSE 'No change'
		END py_change
FROM yearly_product_sales;

-- Part-to-whole analysis
/* (measure/total measure ) * 100 */

-- Which categories contribute the most to the overall sales
WITH category_sales AS (
SELECT category, 
	SUM(sales_amount) total_sales
FROM sales_fact s
LEFT JOIN product_dim p ON s.product_key = p.product_key
GROUP BY (category) )


SELECT category,
		total_sales,
        SUM(total_sales) OVER() Overall_sales,
       CONCAT(ROUND((total_sales / SUM(total_sales)OVER()) * 100, 2), '%') percenteage_of_total
FROM category_sales
ORDER BY total_sales DESC;

-- Data Segmentation
/* Segment products into cost ranges and count how many products fall into each segment*/
SELECT product_key,
		product_name,
        cost,
	CASE 
         WHEN cost < 100 THEN 'BELOW 100'
         WHEN cost BETWEEN 100 AND 500 THEN '100-500'
		 WHEN cost BETWEEN 500 AND 1000 THEN '500-1000'
         ELSE 'Above 1000'
         END cost_range
FROM product_dim;

/* Group customers into three segments based on their spending behavior:
 -- VIp: customers with at least 12 months of history and spending more than $5000.
 -- Regular: customers with at least 12 months of history and spending more than $5,000.
 -- New: Customers with a lifespan less than 12 months
 and find the total number of customers by each group */
WITH customer_spending AS (
SELECT c.customer_key customer_key,
		SUM(s.sales_amount) total_spending,
        MIN(order_date) first_order,
        MAX(order_date) last_order,
       timestampdiff(MONTH, MIN(order_date), MAX(order_date)) lifespan
FROM sales_fact s
LEFT JOIN  customers_dim c ON s.customer_key = c.customer_key
GROUP BY (c.customer_key))


SELECT  customer_segment,
        COUNT(customer_key) total_customer
FROM(SELECT customer_key,
		total_spending,
        lifespan,
	CASE WHEN lifespan >= 12 AND total_spending > 5000 THEN 'VIP'
		 WHEN lifespan >= 12 AND total_spending <= 5000 THEN 'Regular'
        ELSE 'New'
	END customer_segment
FROM customer_spending)T
GROUP BY customer_segment;

/* REPORTING 
 ==============================================================
 Customer Report
 ===============================================================
 Purpose:
 -This report consolidates key customer metrics and behaviours
 Highlights:
 1. Gather essential fields such as names, ages, and transaction details
 2. Segments customers into categories (VIP, Regular, New) and age groups.
 3. Aggregates customer-level metrics:
 - total orders
 -total sales
 - totl quantity purchased
 - total products 
 - lifespan (in months)
 4. Calculates valuable KPIs:
 - recency (monthssince last order)
 - average order value
 - average monthly spend
*/

-- Base Query: Retrieves core columns from tables
CREATE VIEW report_customer AS
WITH base_query AS (
SELECT s.order_number,
		s.product_key,
        s.order_date,
        s.sales_amount,
        s.quantity,
        c.customer_key,
        c.customer_number,
        concat(c.first_name, ' ', c.last_name) customer_name,
        timestampdiff(YEAR, c.birthdate, NOW()) age
FROM sales_fact s
LEFT JOIN customers_dim c
ON s.customer_key = c.customer_key
WHERE order_date != '')
-- Customer Aggregation: Summarizes key metrics at the customer level
, customer_aggregation AS (
SELECT customer_key,
		customer_number,
        customer_name,
        age,
        COUNT(DISTINCT order_number) total_orders,
        SUM(sales_amount) total_sales,
        SUM(quantity) total_quantity,
        COUNT(DISTINCT product_key) total_products,
        MAX(order_date) last_order,
         timestampdiff(MONTH, MIN(order_date), MAX(order_date)) lifespan
FROM base_query
GROUP BY customer_key,
		customer_number,
        customer_name,
        age)
SELECT  customer_key,
		customer_number,
        customer_name,
        age,
	CASE WHEN age < 20 THEN 'Under 20'
		 WHEN age BETWEEN 20 AND 29 THEN '20-29'
         WHEN age BETWEEN 30 AND 39 THEN '30-39'
         WHEN age BETWEEN 40 AND 49 THEN '40-49'
         ELSE '50 and above'
         END age_group,
	CASE WHEN lifespan >= 12 AND total_sales > 5000 THEN 'VIP'
		 WHEN lifespan >= 12 AND total_sales <= 5000 THEN 'Regular'
        ELSE 'New'
        END customer_segment,
        last_order,
        timestampdiff(month, last_order, NOW()) recency, -- recency by month
        total_orders,
        total_sales,
        total_quantity,
        total_products,
        lifespan,
        -- compute average order values
        CASE WHEN total_sales = 0 THEN 0
        ELSE ROUND(total_sales / total_orders, 2) 
         END avg_order_value,
         CASE WHEN lifespan = 0 THEN 0
			  ELSE ROUND(total_sales / lifespan, 2)
		END avg_monthly_spend
FROM customer_aggregation;

/* REPORTING 
 ==============================================================
 Customer Report
 ===============================================================
 Purpose:
 -This report consolidates key customer metrics and behaviours
 Highlights:
 1. Gather essential fields such as product name, category, subcategory and cost
 2. Segments customers into categorieshigh_performer, Mid-Range, or Low-performers.
 3. Aggregates customer-level metrics:
 - total orders
 -total sales
 - totl quantity purchased
 - total customer (unique)
 - lifespan (in months)
 4. Calculates valuable KPIs:
 - recency (monthssince last order)
 - average order value
 - average monthly spend
*/
CREATE VIEW product_report AS (
WITH base_query AS (
-- Base Query: Retrive core columns from sales_fact and product-dim
SELECT 
	p.product_name,
	p.category,
	p.subcategory,
	p.cost,
	s.order_number,
    s.product_key,
	s.quantity,
	s.order_date,
    s.customer_key,
	s.sales_amount
FROM product_dim p
LEFT JOIN sales_fact s ON p.product_key = s.product_key
WHERE order_date IS NOT NULL -- only consider valid sales date
)
, product_aggregation AS (
SELECT 
		product_name,
		category,
        subcategory,
        cost,
        COUNT(DISTINCT order_number) total_order,
        SUM(sales_amount) total_sales,
        SUM(quantity) quantity_sold,
        COUNT(DISTINCT customer_key) total_customer,
        MAX(order_date) last_order_date,
        timestampdiff(MONTH, MIN(order_date), MAX(order_date)) lifespan,
		product_key
FROM base_query
GROUP BY product_name,
		category,
        subcategory,
        cost, product_key )
SELECT 
		product_key,
        product_name,
        category,
        subcategory,
        cost,
        last_order_date,
        timestampdiff(MONTH, last_order_date, NOW()) recency_in_months,
	CASE 	WHEN total_sales > 50000 THEN 'High-performer'
			WHEN total_sales >= 10000 THEN 'Mid-Range'
            ELSE 'Low-performer'
            END product_segment,
            lifespan,
            total_order,
            total_sales,
            quantity_sold,
            total_customer,
            -- average order revenue
	CASE	WHEN total_sales = 0 THEN 0
			ELSE 'Low_performer'
            END avg_order_revenue,
            -- average monthly revenue
	CASE	WHEN lifespan = 0 THEN total_sales
			ELSE ROUND(total_sales / lifespan, 2)
            END avg_monthly_revenue
FROM product_aggregation)

